// Direct PERSONA Wallet Core test - server-side only components
const { createWalletClient, createPublicClient, http, parseEther, formatEther } = require('viem')
const { generatePrivateKey, privateKeyToAccount, privateKeyToAddress } = require('viem/accounts')

// PersonaChain Network Configuration  
const PERSONACHAIN_NETWORK = {
  id: 'personachain-1',
  name: 'PersonaChain',
  network: 'personachain',
  nativeCurrency: {
    decimals: 18,
    name: 'PERSONA',
    symbol: 'PERSONA',
  },
  rpcUrls: {
    default: {
      http: ['http://44.201.59.57:26657'],
    },
    public: {
      http: ['http://44.201.59.57:26657'],
    },
  },
  blockExplorers: {
    default: { name: 'PersonaChain Explorer', url: 'https://explorer.personapass.xyz' },
  },
  testnet: true,
}

async function testWalletCore() {
  try {
    console.log('üöÄ Testing PERSONA Wallet Core with PersonaChain...\n')
    
    // Test 1: Create wallet
    console.log('1Ô∏è‚É£ Creating wallet...')
    const privateKey = generatePrivateKey()
    const account = privateKeyToAccount(privateKey)
    const address = privateKeyToAddress(privateKey)
    const did = `did:persona:${address.slice(2)}`
    
    console.log(`‚úÖ Wallet created successfully!`)
    console.log(`üÜî DID: ${did}`)
    console.log(`üí≥ Address: ${address}`)
    console.log(`üîë Private Key: ${privateKey.slice(0, 10)}...${privateKey.slice(-4)}`)
    
    // Test 2: Initialize clients
    console.log('\n2Ô∏è‚É£ Connecting to PersonaChain...')
    const publicClient = createPublicClient({
      chain: PERSONACHAIN_NETWORK,
      transport: http()
    })
    
    const walletClient = createWalletClient({
      account,
      chain: PERSONACHAIN_NETWORK,
      transport: http()
    })
    
    console.log('‚úÖ Clients initialized successfully!')
    
    // Test 3: Check PersonaChain connectivity
    console.log('\n3Ô∏è‚É£ Testing PersonaChain RPC connectivity...')
    try {
      // Note: This might fail because PersonaChain RPC might not be fully EVM compatible
      const balance = await publicClient.getBalance({ address })
      console.log(`üí∞ Balance: ${formatEther(balance)} PERSONA`)
    } catch (error) {
      console.log(`‚ö†Ô∏è Balance check failed (expected - PersonaChain may not be fully EVM compatible)`)
      console.log(`Error: ${error.message}`)
    }
    
    // Test 4: Create DID Document
    console.log('\n4Ô∏è‚É£ Creating DID document...')
    const didDocument = {
      '@context': ['https://www.w3.org/ns/did/v1', 'https://w3id.org/security/v1'],
      id: did,
      publicKey: [{
        id: `${did}#key-1`,
        type: 'Secp256k1VerificationKey2018',
        controller: did,
        publicKeyHex: account.publicKey
      }],
      authentication: [`${did}#key-1`],
      service: [{
        id: `${did}#persona-service`,
        type: 'PersonaIdentityService',
        serviceEndpoint: 'https://api.personapass.xyz/api'
      }]
    }
    
    console.log('‚úÖ DID document created:')
    console.log(JSON.stringify(didDocument, null, 2))
    
    // Test 5: Create verifiable credential
    console.log('\n5Ô∏è‚É£ Creating verifiable credential...')
    const credential = {
      id: `urn:uuid:${Math.random().toString(36).substring(7)}`,
      type: ['VerifiableCredential', 'EmailCredential'],
      credentialSubject: {
        id: did,
        email: 'test@personapass.me',
        verifiedAt: new Date().toISOString()
      },
      issuer: did,
      issuanceDate: new Date().toISOString()
    }
    
    console.log('‚úÖ Credential created:')
    console.log(JSON.stringify(credential, null, 2))
    
    // Test 6: Sign message
    console.log('\n6Ô∏è‚É£ Testing message signing...')
    const message = `PersonaPass Identity Verification: ${new Date().toISOString()}`
    try {
      const signature = await walletClient.signMessage({ message })
      console.log(`‚úÖ Message signed successfully!`)
      console.log(`üìù Message: ${message}`)
      console.log(`‚úçÔ∏è Signature: ${signature.slice(0, 20)}...${signature.slice(-10)}`)
    } catch (error) {
      console.log(`‚ö†Ô∏è Signing failed: ${error.message}`)
    }
    
    console.log('\nüéâ PERSONA Wallet Core test completed!')
    console.log('\nüìä Test Summary:')
    console.log('‚úÖ Wallet creation: SUCCESS')
    console.log('‚úÖ DID generation: SUCCESS') 
    console.log('‚úÖ PersonaChain client setup: SUCCESS')
    console.log('‚úÖ DID document creation: SUCCESS')
    console.log('‚úÖ Credential creation: SUCCESS')
    console.log('‚ö†Ô∏è PersonaChain interaction: LIMITED (Cosmos SDK vs EVM)')
    
  } catch (error) {
    console.error('\n‚ùå Test failed:', error)
  }
}

// Run test
testWalletCore()